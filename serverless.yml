service: tr-data-processing
app: event-driven-orchestrator
#org: client name?

frameworkVersion: '3'
configValidationMode: error

provider:
  name: aws
  runtime: python3.9
  stage: dev
  region: us-east-1
  logRetentionInDays: 7
  eventBridge:
    useCloudFormation: true
  tracing:
    lambda: true
#    apiGateway: true
#  vpc:
#    securityGroupIds: ${file(./config/${self:provider.stage}.json):securityGroupIds}
#    subnetIds: ${file(./config/${self:provider.stage}.json):subnetIds}

package:
  individually: true
  excludeDevDependencies: true
  patterns:
    - "!test/**"
    - "!.git/**"
    - "!.serverless/**"
    - "!coverage/**"
    - "!README.md"
    - "!TODO.md"
    - "!LICENSE"

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: non-linux

functions:
  ObjectLandedEventPublisher:
    name: TRDataProcessing-ObjectLandedTrigger-${self:provider.stage}
    role: TRDataAcquisitionFunctionsLambdaRole
    module: TRDataProcessing
    handler: object_landed_event_publisher.fun
    memorySize: 128
    timeout: 10
    events:
      - s3:
          bucket: tr-event-driven-data-processing-${self:provider.stage}
          event: s3:ObjectCreated:*
          rules:
            - prefix: ingest/
            - suffix: .csv
          existing: true
          forceDeploy: true
    environment:
      EVENT_SOURCE: ${file(./config/${self:provider.stage}.json):messaging.eventBridge.objectLanded.source}
      EVENT_DETAIL_TYPE: ${file(./config/${self:provider.stage}.json):messaging.eventBridge.objectLanded.detailType}
      EVENT_BUS: ${file(./config/${self:provider.stage}.json):messaging.eventBridge.objectLanded.eventBus}
    tags:
      purpose: lambda function which is triggered on every PUT event to notify all down stream systems and services

  DAGTriggerer:
    name: TRDataProcessing-DAGTriggerer-${self:provider.stage}
    role: TRDataAcquisitionFunctionsLambdaRole
    module: TRDataProcessing
    handler: dag_triggerer.fun
    memorySize: 128
    timeout: 10
    events:
      - eventBridge:
          eventBus:
            Fn::GetAtt:
              - MLPlatformEventBus
              - Name
          pattern:
            detail-type:
              - ${file(./config/${self:provider.stage}.json):messaging.eventBridge.objectLanded.detailType}
          deadLetterQueueArn:
            Fn::GetAtt:
              - SQSDeadLetterQueue
              - Arn
          retryPolicy:
            maximumEventAge: 2400
            maximumRetryAttempts: 5
    environment:
      EVENT_SOURCE: ${file(./config/${self:provider.stage}.json):messaging.eventBridge.dagTriggered.source}
      EVENT_DETAIL_TYPE: ${file(./config/${self:provider.stage}.json):messaging.eventBridge.dagTriggered.detailType}
      EVENT_BUS: ${file(./config/${self:provider.stage}.json):messaging.eventBridge.dagTriggered.eventBus}
    tags:
      purpose: lambda function which executes on a rule and is responsible for triggering and communicating a DAG trigger

  MessageLogger:
    name: TRDataProcessing-MessageLogger-${self:provider.stage}
    role: TRDataAcquisitionFunctionsLambdaRole
    module: TRDataProcessing
    handler: message_logger.fun
    memorySize: 128
    timeout: 10
    events:
      - eventBridge:
          eventBus:
            Fn::GetAtt:
              - MLPlatformEventBus
              - Name
          pattern:
            source:
              - prefix: "/tr/"
    tags:
      purpose: Logging all messages for observability purposes

resources:
  Resources:
    TREventDrivenDataProcessingS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: Private
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        BucketName: !Join
          - '-'
          - - 'tr-event-driven-data-processing'
            - ${self:provider.stage}
        LifecycleConfiguration:
          Rules:
            - ExpirationInDays: 90
              Status: Enabled
        Tags:
          - Key: CostCenter
            Value: PersonalDevelopment
          - Key: Purpose
            Value: PoC
      DeletionPolicy: Retain
    MLPlatformEventBus:
      Type: AWS::Events::EventBus
      Properties:
        Name: MLPlatformEventBus
        Tags:
          - Key: CostCenter
            Value: PersonalDevelopment
          - Key: Purpose
            Value: PoC
    SQSDeadLetterQueue:
      Type: AWS::SQS::Queue
    TRDataAcquisitionFunctionsLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: "sts:AssumeRole"
        Path: /
        Policies:
          - PolicyName: logs
            PolicyDocument:
              Statement:
                Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
          - PolicyName: lambda
            PolicyDocument:
              Statement:
                Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"
          - PolicyName: S3
            PolicyDocument:
              Statement:
                Effect: Allow
                Action:
                  - "s3:*"
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref TREventDrivenDataProcessingS3Bucket
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref TREventDrivenDataProcessingS3Bucket
                      - "/*"
          - PolicyName: EventBusAccess
            PolicyDocument:
              Statement:
                Effect: Allow
                Action:
                  - "events:*"
                Resource: "*"
          - PolicyName: DLQSQSAccess
            PolicyDocument:
              Statement:
                Effect: Allow
                Action:
                  - "sqs:SendMessage"
                  - "sqs:DeleteMessage"
                  - "sqs:GetQueueAttributes"
                  - "sqs:GetQueueUrl"
                  - "sqs:ListQueues"
                  - "sqs:ReceiveMessage"
                  - "sqs:SetQueueAttributes"
                Resource:
                  Fn::GetAtt:
                  - SQSDeadLetterQueue
                  - Arn
